[{"C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\App.tsx":"1","C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\index.tsx":"2","C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\ui\\TopNav.tsx":"3","C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\ui\\BottomNav.tsx":"4","C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\ui\\Nav.tsx":"5","C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\reportWebVitals.ts":"6","C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\sortingAlgorithms\\bubbleSort.ts":"7","C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\sortingAlgorithms\\sortingTimers.ts":"8","C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\helperFunctions\\barStates.ts":"9","C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\helperFunctions\\backgroundColors.ts":"10"},{"size":11792,"mtime":1608909614879,"results":"11","hashOfConfig":"12"},{"size":591,"mtime":1608493443690,"results":"13","hashOfConfig":"12"},{"size":2261,"mtime":1608562279104,"results":"14","hashOfConfig":"12"},{"size":556,"mtime":1608562243402,"results":"15","hashOfConfig":"12"},{"size":541,"mtime":1608562219345,"results":"16","hashOfConfig":"12"},{"size":436,"mtime":1608493548203,"results":"17","hashOfConfig":"18"},{"size":3251,"mtime":1608879317237,"results":"19","hashOfConfig":"12"},{"size":310,"mtime":1608912538791,"results":"20","hashOfConfig":"12"},{"size":131,"mtime":1608815452177,"results":"21","hashOfConfig":"12"},{"size":97,"mtime":1608847099559,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"dq7rj5",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k4hqbt",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\App.tsx",["45","46","47","48","49"],"import React, {\n  useEffect, useRef, useState, MouseEvent,\n} from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { Header, Label, Message } from 'semantic-ui-react';\nimport './App.css';\nimport TopNav from './ui/TopNav';\nimport BottomNav from './ui/BottomNav';\nimport { stopSortTimers } from './sortingAlgorithms/sortingTimers';\nimport { Bar, ArrayBars } from './helperFunctions/ArrayBars';\nimport barStates from './helperFunctions/barStates';\nimport bubbleSort from './sortingAlgorithms/bubbleSort';\n\nlet n = 0;\n// let _i = -1;\nlet isArrayBeingGenerated = false;\nlet currentWidth: number;\nlet holderDivWidthVal = 0;\nlet barHeight = 0;\nlet debounceTimer: number = 0;\nlet isSorting = false;\nlet sortingTimer = 0;\n\nconst minWidth = 2;\nconst maxWidth = 50;\n\nconst debounce = (callBack: () => void, time: number = 305) => {\n  debounceTimer = 0;\n  return () => {\n    if (debounceTimer) clearTimeout(debounceTimer);\n    debounceTimer = window.setTimeout(callBack, time);\n  };\n};\n\nconst show = (element: HTMLElement) => {\n  element.classList.remove('hide');\n};\n\nconst hide = (element: HTMLElement) => {\n  element.classList.add('hide');\n};\n\n// const timer = (ms: number) => new Promise((res) => setTimeout(res, ms));\nconst randomBumber = (min: number, max: number) => Math.random() * (max - min + 1) + min;\nconst randomIntFromInterval = (min: number, max: number) => Math.floor(randomBumber(min, max));\n\nconst setCurrentWidth = (_slider: HTMLInputElement) => {\n  // get value of slider and calculate the width of each bar\n  if (_slider.valueAsNumber % 2 === 0) {\n    currentWidth = (maxWidth - _slider.valueAsNumber) + minWidth;\n    // sortingTimer = currentWidth;\n    sortingTimer = (maxWidth - _slider.valueAsNumber) + minWidth;\n  }\n};\n\nconst hideShowValue = (value: number) => (currentWidth >= 40 ? value : '');\n\nconst getColor = (state: string) => {\n  let backgroundColor = '';\n\n  switch (state) {\n    case barStates.defaultState:\n      backgroundColor = '#2185d0';\n      break;\n    case barStates.selectedState:\n      backgroundColor = '#ff0000';\n      break;\n    case barStates.sortedState:\n      backgroundColor = '#40e0d0';\n      break;\n    default:\n      backgroundColor = '#2185d0';\n  }\n\n  return backgroundColor;\n};\n\nfunction App() {\n  const topNav = useRef<HTMLDivElement>(null);\n  const bottomNav = useRef<HTMLDivElement>(null);\n  const container = useRef<HTMLDivElement>(null);\n  const loadingIndicator = useRef<HTMLDivElement>(null);\n  const holderDiv = useRef<HTMLDivElement>(null);\n  const slider = useRef<HTMLInputElement>(null);\n  const buttomSection = useRef<HTMLDivElement>(null);\n  const select = useRef<HTMLSelectElement>(null);\n  const arrayBars = useRef<Array<HTMLDivElement>>([]);\n  const barValues = useRef<Array<HTMLSpanElement>>([]);\n\n  const sliderValue = useRef(() => { });\n  const calculateAndSetDimension = useRef(() => { });\n\n  const [containerHeight, setContainerHeight] = useState(0);\n  const [array, setArray] = useState<ArrayBars>([]);\n  const [showMessage, setShowMessage] = useState(false as boolean);\n\n  const topNavHeight = () => topNav.current!!.clientHeight;\n  const bottomNavHeight = () => bottomNav.current!!.clientHeight;\n  const containerTopMargin = () => container.current!!.offsetTop;\n  const holderDivWidth = () => holderDiv.current!!.clientWidth;\n  const buttomSectionHeight = () => buttomSection.current!!.clientHeight;\n\n  const generateArray = async (size: number) => {\n    show(loadingIndicator.current!!);\n    const arr: ArrayBars = [];\n\n    for (let i = 0; i < size; i += 1) {\n      // _i = i;\n      isArrayBeingGenerated = true;\n      if (size !== n) { break; }\n      arr.push({\n        value: randomIntFromInterval(5, barHeight),\n        state: barStates.defaultState,\n        idx: i,\n      });\n      // await timer(1000);\n    }\n\n    if (size === n) {\n      setArray!!(arr);\n      hide(loadingIndicator.current!!);\n      // _i = -1;\n      isArrayBeingGenerated = false;\n    }\n  };\n\n  const generateArrayOnClick = (e: MouseEvent) => {\n    e.preventDefault();\n    if (!isArrayBeingGenerated && !isSorting) generateArray(n);\n    // if (_i === -1) generateArray(n);\n  };\n\n  sliderValue.current = () => {\n    const sliderVal = slider.current!!;\n    setCurrentWidth(sliderVal);\n    // generate random array bars as slider is moved\n    sliderVal.oninput = () => {\n      setCurrentWidth(sliderVal);\n      n = Math.floor(holderDivWidthVal / (currentWidth + minWidth));\n      generateArray(n);\n    };\n  };\n\n  const disableUIElements = () => {\n    isSorting = true;\n    slider.current!!.disabled = true;\n    select.current!!.disabled = true;\n  };\n\n  const enableUIElements = () => {\n    isSorting = false;\n    slider.current!!.disabled = false;\n    select.current!!.disabled = false;\n  };\n\n  const restoreArrayBars = (arr: ArrayBars) => {\n    arr.map((val: Bar, idx) => {\n      arrayBars.current[idx].style.backgroundColor = '#2185d0';\n      arrayBars.current[idx].style.height = `${val.value}px`;\n      barValues.current[idx].textContent = hideShowValue(val.value) as unknown as string;\n      return arr;\n    });\n  };\n\n  calculateAndSetDimension.current = () => {\n    stopSortTimers();\n    const windowHeight = window.innerHeight;\n    const topNavHeightVal = topNavHeight();\n    const bottomNavVal = bottomNavHeight();\n    const containerTopMarginVal = containerTopMargin();\n\n    // calculate the remaining window height to show bars\n    const remainingWindowHeight = windowHeight - containerTopMarginVal;\n    const spaceBetweenTopNavAndContainerOffset = containerTopMarginVal - topNavHeightVal;\n    const height = remainingWindowHeight - spaceBetweenTopNavAndContainerOffset - bottomNavVal;\n\n    setContainerHeight!!(height);\n\n    // holder div containing the bars and calculating the maximum bar height\n    holderDivWidthVal = holderDivWidth();\n    const buttomSectionHeightVal = buttomSectionHeight();\n    barHeight = height - buttomSectionHeightVal - 10;\n\n    /*\n      calculating the number of random bars to generate according to the available width\n      and the value of the slider\n    */\n    n = Math.floor(holderDivWidthVal / (currentWidth + minWidth));\n    // n += 2;\n    // -i = 0;\n    // _i = 0;\n    isArrayBeingGenerated = true;\n    generateArray(n);\n    clearTimeout(debounceTimer);\n    enableUIElements();\n  };\n\n  const isArraySorted = () => {\n    if (isArrayBeingGenerated) return true;\n    const jsSortedArray = array.slice().sort((a: Bar, b: Bar) => a.value - b.value);\n    return JSON.stringify(array) === JSON.stringify(jsSortedArray);\n  };\n\n  const finishSortArrayHelper = (arr: ArrayBars) => {\n    stopSortTimers();\n    enableUIElements();\n    restoreArrayBars(arr);\n  };\n\n  const finishSortArray = (e: MouseEvent) => {\n    e.preventDefault();\n    const arr = array.slice().sort((a: Bar, b: Bar) => a.value - b.value);\n    finishSortArrayHelper(arr);\n  };\n\n  const sortArray = (e: MouseEvent, key: string) => {\n    e.preventDefault();\n    let timer = 0;\n    switch (key) {\n      case 'bubble_sort':\n        if (isArraySorted() || isSorting) return;\n        disableUIElements();\n        bubbleSort(\n          array,\n          arrayBars,\n          barValues,\n          sortingTimer,\n          finishSortArrayHelper,\n          hideShowValue,\n        );\n        break;\n      case 'insertion_sort':\n        alert('implement inserstion sort');\n        break;\n      case 'selection_sort':\n        alert('implement selection sort');\n        break;\n      case 'shell_sort':\n        alert('implement shell sort');\n        break;\n      case 'merge_sort':\n        alert('implement merge sort');\n        break;\n      case 'quick_sort':\n        alert('implement quick sort');\n        break;\n      default:\n        setShowMessage!!(true);\n        timer = window.setTimeout(() => {\n          setShowMessage!!(false);\n          clearTimeout(timer);\n        }, 3000);\n    }\n  };\n\n  const setBarColor = (idx: number) => {\n    const ab = arrayBars.current[idx];\n    const bv = barValues.current[idx];\n    if (ab !== undefined && ab !== null) {\n      ab.style.backgroundColor = '#2185d0';\n      ab.style.height = `${array[idx].value}px`;\n      bv.textContent = hideShowValue(array[idx].value) as unknown as string;\n    }\n  };\n\n  useEffect(() => {\n    sliderValue.current();\n    calculateAndSetDimension.current();\n    // effect\n    window.addEventListener('resize', debounce(calculateAndSetDimension.current));\n\n    return () => {\n      // cleanup\n      window.removeEventListener('resize', debounce(calculateAndSetDimension.current));\n    };\n  }, []);\n\n  return (\n    <div>\n      <TopNav>\n        {{\n          topNav, generateNewArray: generateArrayOnClick, sortArray, select,\n        }}\n      </TopNav>\n      <Container\n        className=\"container\"\n        style={{ height: containerHeight }}\n        ref={container}\n      >\n        <Row>\n          <Col />\n          <Col\n            style={{ height: containerHeight }}\n            className=\"sort-div\"\n            lg={12}\n            md={12}\n            sm={12}\n            xl={12}\n            xs={12}\n          >\n            <div ref={holderDiv} className=\"holder\">\n              {\n                array.map((val: Bar, idx) => (\n                  <div\n                    ref={(element: HTMLDivElement) => { arrayBars.current[val.idx] = element; }}\n                    style={{\n                      width: currentWidth,\n                      height: `${val.value}px`,\n                      backgroundColor: getColor(val.state),\n                    }}\n                    className=\"array-bar\"\n                    key={val.idx}\n                  >\n                    { setBarColor(idx) }\n                    <span\n                      ref={(element: HTMLSpanElement) => { barValues.current[val.idx] = element; }}\n                      className=\"span-value text-align\"\n                    >\n                      {hideShowValue(val.value)}\n                    </span>\n                  </div>\n                ))\n              }\n              <div ref={buttomSection}>\n                <div className=\"finish-button\">\n                  <a\n                    href=\"/finish\"\n                    onClick={finishSortArray}\n                    className=\"ui secondary submit button inverted\"\n                  >\n                    Finish\n                  </a>\n                </div>\n                <div>Change Array Size and Sorting Speed</div>\n                <div>\n                  <input\n                    ref={slider}\n                    type=\"range\"\n                    min={minWidth}\n                    max={maxWidth}\n                    defaultValue=\"2\"\n                  />\n                </div>\n              </div>\n            </div>\n          </Col>\n          <Col />\n        </Row>\n      </Container>\n      <BottomNav>{{ bottomNav, generateNewArray: generateArrayOnClick }}</BottomNav>\n\n      <div ref={loadingIndicator}>\n        <div className=\"info\">\n          <Header textAlign=\"center\" block>\n            <Label color=\"grey\" size=\"large\">Loading .....</Label>\n          </Header>\n        </div>\n      </div>\n\n      <div\n        aria-live=\"polite\"\n        aria-atomic=\"true\"\n        style={{\n          position: 'relative',\n          display: showMessage ? 'block' : 'none',\n        }}\n      >\n        <div style={{ position: 'absolute', bottom: 0, right: 0 }}>\n          {\n            (showMessage)\n          }\n          <Message\n            negative\n            compact\n            style={{ width: '305px' }}\n            onDismiss={() => setShowMessage!!(false)}\n          >\n            <Message.Header>Sorting Visualizer</Message.Header>\n            <p>Please Select a Sorting Algorithm.</p>\n          </Message>\n        </div>\n      </div>\n      <div className=\"error-div\">Use Screen of 320px and above</div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\index.tsx",[],"C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\ui\\TopNav.tsx",[],["50","51","52","53","54","55"],"C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\ui\\BottomNav.tsx",[],"C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\ui\\Nav.tsx",[],"C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\reportWebVitals.ts",[],"C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\sortingAlgorithms\\bubbleSort.ts",[],"C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\sortingAlgorithms\\sortingTimers.ts",[],"C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\helperFunctions\\barStates.ts",[],"C:\\xampp\\htdocs\\projects\\sorting-visualizer\\src\\helperFunctions\\backgroundColors.ts",[],{"ruleId":"56","severity":1,"message":"57","line":233,"column":9,"nodeType":"58","messageId":"59","endLine":233,"endColumn":43},{"ruleId":"56","severity":1,"message":"57","line":236,"column":9,"nodeType":"58","messageId":"59","endLine":236,"endColumn":42},{"ruleId":"56","severity":1,"message":"57","line":239,"column":9,"nodeType":"58","messageId":"59","endLine":239,"endColumn":38},{"ruleId":"56","severity":1,"message":"57","line":242,"column":9,"nodeType":"58","messageId":"59","endLine":242,"endColumn":38},{"ruleId":"56","severity":1,"message":"57","line":245,"column":9,"nodeType":"58","messageId":"59","endLine":245,"endColumn":38},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},"no-alert","Unexpected alert.","CallExpression","unexpected","lines-around-directive",["72"],"no-spaced-func",["73"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"padding-line-between-statements","func-call-spacing"]