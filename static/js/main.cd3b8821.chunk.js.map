{"version":3,"sources":["ui/Nav.tsx","sortingAlgorithms/sortingAlgorithmOptions.ts","ui/TopNav.tsx","ui/BottomNav.tsx","App.tsx","sortingAlgorithms/sortingTimers.ts","helperFunctions/barStates.ts","helperFunctions/backgroundColors.ts","sortingAlgorithms/bubbleSort.ts","sortingAlgorithms/insertionSort.ts","sortingAlgorithms/selectionSort.ts","sortingAlgorithms/shellSort.ts","sortingAlgorithms/mergeSort.ts","sortingAlgorithms/quickSort.ts","reportWebVitals.ts","index.tsx"],"names":["Title","props","generateNewArray","children","Menu","Item","href","header","className","onClick","comparisonSortingAlgorithmOptions","key","text","value","TopNav","useState","setValue","topNav","sortArray","select","options","comparisonSort","i","length","comparisonSortVal","push","ref","Nav","style","padding","name","defaultValue","onChange","e","target","disabled","event","BottomNav","currentWidth","bottomNav","sortTimers","stopBubbleSortTimer","stopInsertionSortTimer","stopMergeSortTimer","stopQuickSortTimer","stopSelectionSortTimer","stopShellSortTimer","timer","ms","Promise","res","setTimeout","startBubbleSortTimer","startShellSortTimer","stopSortTimers","barStates","defaultState","selectedState","sortedState","blue","red","turquoise","arr","swap","positionA","positionB","temp","bubbleSort","array","arrayBars","barValues","a","sortingTimer","finishSortArrayHelper","hideShowValue","j","valueA","valueB","isSortingTimerNull","isValueAGreaterThanValueB","arrayBarA","current","arrayBarB","barValueA","barValueB","backgroundColor","height","textContent","insert","insertionSort","currentVal","valJ","isValJGreaterThanCurrent","arrayBari","arrayBarj","k","ab","bv","posA","posB","selectionSort","minPos","isValJLessThanMinVal","abA","abB","bvA","bvB","shellSort","n","gap","Math","floor","originalArr","mergeSortHelper","arry","lowerBound","upperBound","animations","mid","finalArr","anims","comparison","put","merge","animateMergeHelper","auxiliaryArr","swapidx0","swapidx1","oArrPos","animate","isArrDivisibleBy2","middle","isFinalMerge","changedVal","changeBar","barValue","mergeSort","swapValues","comparisonAnims","startOrEnd","swapAnims","startOrLowerBound","end","finalSwap","quickSortHelper","pivot","start","partitiion","animateQuickSort","arrayBarCPosH","arrayBarCPos","arrayBarAa","arrayBarBb","barValueAa","barValueBb","swapPos","comparisonPos","animsH","comparisonH","isArrayBeingGenerated","holderDivWidthVal","barHeight","debounceTimer","isSorting","isSliderChecked","debounce","callBack","time","clearTimeout","window","hide","element","classList","add","randomIntFromInterval","min","max","random","randomBumber","setCurrentWidth","_slider","valueAsNumber","getColor","state","App","useRef","container","loadingIndicator","holderDiv","slider","buttomSection","arraySizeSpeed","finishButton","sliderValue","calculateAndSetDimension","containerHeight","setContainerHeight","setArray","showMessage","setShowMessage","generateArray","size","remove","idx","generateArrayOnClick","preventDefault","sliderVal","oninput","disableUIElements","enableUIElements","windowHeight","innerHeight","bottomNavVal","clientHeight","offsetTop","clientWidth","buttomSectionHeightVal","isArraySorted","jsSortedArray","slice","sort","b","JSON","stringify","map","val","restoreArrayBars","setBarColor","undefined","useEffect","addEventListener","removeEventListener","quickSort","checked","width","onlabel","onstyle","offlabel","offstyle","document","body","color","borderBottom","borderTop","border","darkModeToggle","Container","Row","Col","lg","md","sm","xl","xs","type","Header","textAlign","block","Label","aria-live","aria-atomic","position","display","bottom","right","Message","negative","compact","onDismiss","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cd3b8821.chunk.js","sourcesContent":["import React, { MouseEvent } from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\n\r\ntype Props = {\r\n  children: {\r\n    // eslint-disable-next-line no-unused-vars\r\n    generateNewArray: (e: MouseEvent) => void\r\n  }\r\n}\r\n\r\nfunction Title(props: Props) {\r\n  const { children } = props;\r\n  const { generateNewArray } = children;\r\n\r\n  return (\r\n    <>\r\n      <Menu.Item href=\"/sorting-visualizer\" header>Sorting Visualizer</Menu.Item>\r\n      <a className=\"item\" href=\"/generate-new-array\" onClick={generateNewArray}>Generate New Array</a>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","const comparisonSortingAlgorithmOptions = () => {\r\n  const comparisonSortingAlgorithms = [\r\n    { key: 'bubble_sort', text: 'Bubble Sort', value: 'bubble_sort' },\r\n    { key: 'insertion_sort', text: 'Insertion Sort', value: 'insertion_sort' },\r\n    { key: 'merge_sort', text: 'Merge Sort', value: 'merge_sort' },\r\n    { key: 'quick_sort', text: 'Quick Sort', value: 'quick_sort' },\r\n    { key: 'selection_sort', text: 'Selection Sort', value: 'selection_sort' },\r\n    { key: 'shell_sort', text: 'Shell Sort', value: 'shell_sort' },\r\n  ];\r\n\r\n  return comparisonSortingAlgorithms;\r\n};\r\n\r\nexport default comparisonSortingAlgorithmOptions;\r\n","import React, {\r\n  RefObject, MouseEvent, useState, ChangeEvent,\r\n} from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport Nav from './Nav';\r\nimport './TopNav.css';\r\nimport comparisonSortingAlgorithmOptions from '../sortingAlgorithms/sortingAlgorithmOptions';\r\n\r\ntype Props = {\r\n  children: {\r\n    topNav: RefObject<HTMLDivElement> | null,\r\n    // eslint-disable-next-line no-unused-vars\r\n    generateNewArray: (e: MouseEvent) => void,\r\n    // eslint-disable-next-line no-unused-vars\r\n    sortArray: (e: MouseEvent, p: string) => void,\r\n    select: RefObject<HTMLSelectElement> | null\r\n  }\r\n}\r\n// Select sorting algorithm\r\n\r\nfunction TopNav(props: Props) {\r\n  const [value, setValue] = useState('');\r\n\r\n  const { children } = props;\r\n  const {\r\n    topNav, generateNewArray, sortArray, select,\r\n  } = children;\r\n  // const { topNav, generateNewArray, sortArray } = props.children;\r\n  const options = [];\r\n  const comparisonSort = comparisonSortingAlgorithmOptions();\r\n\r\n  const getAndSetValue = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    setValue!!(e.target.value);\r\n  };\r\n\r\n  for (let i = 0; i < comparisonSort.length; i += 1) {\r\n    const comparisonSortVal = comparisonSortingAlgorithmOptions()[i];\r\n    options.push(\r\n      <option key={comparisonSortVal.key} value={comparisonSortVal.value}>\r\n        {comparisonSortVal.text}\r\n      </option>,\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"ui menu\" ref={topNav}>\r\n      <span className=\"show-for-large\">\r\n        <Nav>{{ generateNewArray }}</Nav>\r\n      </span>\r\n\r\n      <Menu.Item>\r\n        {/* <select style={{ padding: '5px 5px' }} name='sorting_algorithms'\r\n          className='ui selection dropdown'\r\n        > */}\r\n        <select\r\n          ref={select}\r\n          style={{ padding: '5px 5px' }}\r\n          name=\"sorting_algorithms\"\r\n          className=\"ui selection fluid dropdown\"\r\n          defaultValue=\"\"\r\n          onChange={getAndSetValue}\r\n        >\r\n          <option value=\"\" disabled>Select Sorting Algorithm</option>\r\n          {options}\r\n        </select>\r\n      </Menu.Item>\r\n\r\n      <Menu.Item>\r\n        <a\r\n          href=\"/sort\"\r\n          className=\"ui fluid blue submit button\"\r\n          onClick={(event) => sortArray(event, value!!)}\r\n        >\r\n          Sort\r\n        </a>\r\n      </Menu.Item>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TopNav;\r\n","import React, { MouseEvent, RefObject } from 'react';\r\nimport Nav from './Nav';\r\n\r\ntype Props = {\r\n  children: {\r\n    bottomNav: RefObject<HTMLDivElement> | null,\r\n    // eslint-disable-next-line no-unused-vars\r\n    generateNewArray: (e: MouseEvent) => void\r\n  }\r\n}\r\n\r\nfunction BottomNav(props: Props) {\r\n  const { children } = props;\r\n  const { bottomNav, generateNewArray } = children;\r\n\r\n  return (\r\n    <div className=\"ui bottom fixed two item menu show-for-medium\" ref={bottomNav}>\r\n      <Nav>{{ generateNewArray }}</Nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BottomNav;\r\n","import React, {\r\n  useEffect, useRef, useState, MouseEvent,\r\n} from 'react';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport { Header, Label, Message } from 'semantic-ui-react';\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react';\r\nimport './App.css';\r\nimport TopNav from './ui/TopNav';\r\nimport BottomNav from './ui/BottomNav';\r\nimport { stopSortTimers } from './sortingAlgorithms/sortingTimers';\r\nimport { Bar, ArrayBars } from './helperFunctions/ArrayBars';\r\nimport barStates from './helperFunctions/barStates';\r\nimport bubbleSort from './sortingAlgorithms/bubbleSort';\r\nimport insertionSort from './sortingAlgorithms/insertionSort';\r\nimport selectionSort from './sortingAlgorithms/selectionSort';\r\nimport shellSort from './sortingAlgorithms/shellSort';\r\nimport mergeSort, { animate } from './sortingAlgorithms/mergeSort';\r\nimport { quickSort, animateQuickSort } from './sortingAlgorithms/quickSort';\r\n\r\nlet n = 0;\r\n// let _i = -1;\r\nlet isArrayBeingGenerated = false;\r\nlet currentWidth: number;\r\nlet holderDivWidthVal = 0;\r\nlet barHeight = 0;\r\nlet debounceTimer: number = 0;\r\nlet isSorting = false;\r\nlet sortingTimer = 0;\r\nlet isSliderChecked = false;\r\n\r\nconst minWidth = 2;\r\nconst maxWidth = 50;\r\n\r\nconst debounce = (callBack: () => void, time: number = 305) => {\r\n  debounceTimer = 0;\r\n  return () => {\r\n    if (debounceTimer) clearTimeout(debounceTimer);\r\n    debounceTimer = window.setTimeout(callBack, time);\r\n  };\r\n};\r\n\r\nconst show = (element: HTMLElement) => {\r\n  element.classList.remove('hide');\r\n};\r\n\r\nconst hide = (element: HTMLElement) => {\r\n  element.classList.add('hide');\r\n};\r\n\r\n// const timer = (ms: number) => new Promise((res) => setTimeout(res, ms));\r\nconst randomBumber = (min: number, max: number) => Math.random() * (max - min + 1) + min;\r\nconst randomIntFromInterval = (min: number, max: number) => Math.floor(randomBumber(min, max));\r\n\r\nconst setCurrentWidth = (_slider: HTMLInputElement) => {\r\n  // get value of slider and calculate the width of each bar\r\n  if (_slider.valueAsNumber % 2 === 0) {\r\n    currentWidth = (maxWidth - _slider.valueAsNumber) + minWidth;\r\n    // sortingTimer = currentWidth;\r\n    sortingTimer = (maxWidth - _slider.valueAsNumber) + minWidth;\r\n  }\r\n};\r\n\r\nconst hideShowValue = (value: number) => (currentWidth >= 40 ? value : '');\r\n\r\nconst getColor = (state: string) => {\r\n  let backgroundColor = '';\r\n\r\n  switch (state) {\r\n    case barStates.defaultState:\r\n      backgroundColor = '#2185d0';\r\n      break;\r\n    case barStates.selectedState:\r\n      backgroundColor = '#ff0000';\r\n      break;\r\n    case barStates.sortedState:\r\n      backgroundColor = '#40e0d0';\r\n      break;\r\n    default:\r\n      backgroundColor = '#2185d0';\r\n  }\r\n\r\n  return backgroundColor;\r\n};\r\n\r\nfunction App() {\r\n  const topNav = useRef<HTMLDivElement>(null);\r\n  const bottomNav = useRef<HTMLDivElement>(null);\r\n  const container = useRef<HTMLDivElement>(null);\r\n  const loadingIndicator = useRef<HTMLDivElement>(null);\r\n  const holderDiv = useRef<HTMLDivElement>(null);\r\n  const slider = useRef<HTMLInputElement>(null);\r\n  const buttomSection = useRef<HTMLDivElement>(null);\r\n  const select = useRef<HTMLSelectElement>(null);\r\n  const arrayBars = useRef<Array<HTMLDivElement>>([]);\r\n  const barValues = useRef<Array<HTMLSpanElement>>([]);\r\n  const arraySizeSpeed = useRef<HTMLDivElement>(null);\r\n  const finishButton = useRef<HTMLAnchorElement>(null);\r\n\r\n  const sliderValue = useRef(() => { });\r\n  const calculateAndSetDimension = useRef(() => { });\r\n\r\n  const [containerHeight, setContainerHeight] = useState(0);\r\n  const [array, setArray] = useState<ArrayBars>([]);\r\n  const [showMessage, setShowMessage] = useState(false as boolean);\r\n\r\n  // after adding dark mode switch\r\n  // const topNavHeight = () => topNav.current!!.clientHeight;\r\n  const bottomNavHeight = () => bottomNav.current!!.clientHeight;\r\n  const containerTopMargin = () => container.current!!.offsetTop;\r\n  const holderDivWidth = () => holderDiv.current!!.clientWidth;\r\n  const buttomSectionHeight = () => buttomSection.current!!.clientHeight;\r\n\r\n  const darkModeToggle = (checked: boolean) => {\r\n    isSliderChecked = checked;\r\n    const isChecked = checked;\r\n    if (isChecked) {\r\n      document.body.style.backgroundColor = '#1b1c1d';\r\n      arraySizeSpeed.current!!.style.color = '#ffffff';\r\n      finishButton.current!!.classList.remove('secondary');\r\n      finishButton.current!!.classList.add('standard');\r\n      topNav.current!!.classList.add('inverted');\r\n      topNav.current!!.style.borderBottom = '1px solid #767676';\r\n      bottomNav.current!!.classList.add('inverted');\r\n      bottomNav.current!!.style.borderTop = '1px solid #767676';\r\n    } else {\r\n      document.body.style.backgroundColor = '#ffffff';\r\n      arraySizeSpeed.current!!.style.color = '#000000';\r\n      finishButton.current!!.classList.remove('standard');\r\n      finishButton.current!!.classList.add('secondary');\r\n      topNav.current!!.classList.remove('inverted');\r\n      topNav.current!!.style.border = '1px solid rgba(34, 36, 38, .15)';\r\n      bottomNav.current!!.classList.remove('inverted');\r\n      bottomNav.current!!.style.border = '1px solid rgba(34, 36, 38, .15)';\r\n    }\r\n  };\r\n\r\n  const generateArray = async (size: number) => {\r\n    show(loadingIndicator.current!!);\r\n    const arr: ArrayBars = [];\r\n\r\n    for (let i = 0; i < size; i += 1) {\r\n      // _i = i;\r\n      isArrayBeingGenerated = true;\r\n      if (size !== n) { break; }\r\n      arr.push({\r\n        value: randomIntFromInterval(5, barHeight),\r\n        state: barStates.defaultState,\r\n        idx: i,\r\n      });\r\n      // await timer(1000);\r\n    }\r\n\r\n    if (size === n) {\r\n      setArray!!(arr);\r\n      hide(loadingIndicator.current!!);\r\n      // _i = -1;\r\n      isArrayBeingGenerated = false;\r\n    }\r\n  };\r\n\r\n  const generateArrayOnClick = (e: MouseEvent) => {\r\n    e.preventDefault();\r\n    if (!isArrayBeingGenerated && !isSorting) generateArray(n);\r\n    // if (_i === -1) generateArray(n);\r\n  };\r\n\r\n  sliderValue.current = () => {\r\n    const sliderVal = slider.current!!;\r\n    setCurrentWidth(sliderVal);\r\n    // generate random array bars as slider is moved\r\n    sliderVal.oninput = () => {\r\n      setCurrentWidth(sliderVal);\r\n      n = Math.floor(holderDivWidthVal / (currentWidth + minWidth));\r\n      generateArray(n);\r\n    };\r\n  };\r\n\r\n  const disableUIElements = () => {\r\n    isSorting = true;\r\n    slider.current!!.disabled = true;\r\n    select.current!!.disabled = true;\r\n  };\r\n\r\n  const enableUIElements = () => {\r\n    isSorting = false;\r\n    slider.current!!.disabled = false;\r\n    select.current!!.disabled = false;\r\n  };\r\n\r\n  const restoreArrayBars = (arr: ArrayBars) => {\r\n    arr.map((val: Bar, idx) => {\r\n      arrayBars.current[idx].style.backgroundColor = '#2185d0';\r\n      arrayBars.current[idx].style.height = `${val.value}px`;\r\n      barValues.current[idx].textContent = hideShowValue(val.value) as unknown as string;\r\n      return arr;\r\n    });\r\n  };\r\n\r\n  calculateAndSetDimension.current = () => {\r\n    stopSortTimers();\r\n    const windowHeight = window.innerHeight;\r\n    // after adding dark mode switch\r\n    // const topNavHeightVal = topNavHeight();\r\n    const bottomNavVal = bottomNavHeight();\r\n    const containerTopMarginVal = containerTopMargin();\r\n\r\n    // calculate the remaining window height to show bars\r\n    const remainingWindowHeight = windowHeight - containerTopMarginVal;\r\n    // const spaceBetweenTopNavAndContainerOffset = containerTopMarginVal - topNavHeightVal;\r\n    // minus for bottom margin\r\n    const height = remainingWindowHeight - bottomNavVal - 20;\r\n\r\n    setContainerHeight!!(height);\r\n\r\n    // holder div containing the bars and calculating the maximum bar height\r\n    holderDivWidthVal = holderDivWidth();\r\n    const buttomSectionHeightVal = buttomSectionHeight();\r\n    barHeight = height - buttomSectionHeightVal - 20;\r\n\r\n    /*\r\n      calculating the number of random bars to generate according to the available width\r\n      and the value of the slider\r\n    */\r\n    n = Math.floor(holderDivWidthVal / (currentWidth + minWidth));\r\n    // n += 2;\r\n    // -i = 0;\r\n    // _i = 0;\r\n    isArrayBeingGenerated = true;\r\n    generateArray(n);\r\n    clearTimeout(debounceTimer);\r\n    enableUIElements();\r\n  };\r\n\r\n  const isArraySorted = () => {\r\n    if (isArrayBeingGenerated) return true;\r\n    const jsSortedArray = array.slice().sort((a: Bar, b: Bar) => a.value - b.value);\r\n    return JSON.stringify(array) === JSON.stringify(jsSortedArray);\r\n  };\r\n\r\n  const finishSortArrayHelper = (arr: ArrayBars) => {\r\n    stopSortTimers();\r\n    enableUIElements();\r\n    restoreArrayBars(arr);\r\n  };\r\n\r\n  const finishSortArray = (e: MouseEvent) => {\r\n    e.preventDefault();\r\n    const arr = array.slice().sort((a: Bar, b: Bar) => a.value - b.value);\r\n    finishSortArrayHelper(arr);\r\n  };\r\n\r\n  const sortArray = (e: MouseEvent, key: string) => {\r\n    e.preventDefault();\r\n    let timer = 0;\r\n    let animations = [];\r\n    switch (key) {\r\n      case 'bubble_sort':\r\n        if (isArraySorted() || isSorting) return;\r\n        disableUIElements();\r\n        bubbleSort(\r\n          array,\r\n          arrayBars,\r\n          barValues,\r\n          sortingTimer,\r\n          finishSortArrayHelper,\r\n          hideShowValue,\r\n        );\r\n        break;\r\n      case 'insertion_sort':\r\n        if (isArraySorted() || isSorting) return;\r\n        disableUIElements();\r\n        insertionSort(\r\n          array,\r\n          arrayBars,\r\n          barValues,\r\n          sortingTimer,\r\n          finishSortArrayHelper,\r\n          hideShowValue,\r\n        );\r\n        break;\r\n      case 'merge_sort':\r\n        if (isArraySorted() || isSorting) return;\r\n        disableUIElements();\r\n        animations = mergeSort(array, sortingTimer);\r\n        animate(\r\n          animations,\r\n          arrayBars,\r\n          barValues,\r\n          sortingTimer,\r\n          finishSortArrayHelper,\r\n          hideShowValue,\r\n        );\r\n        break;\r\n      case 'quick_sort':\r\n        if (isArraySorted() || isSorting) return;\r\n        disableUIElements();\r\n        animations = quickSort(array, sortingTimer);\r\n        animateQuickSort(\r\n          animations,\r\n          arrayBars,\r\n          barValues,\r\n          sortingTimer,\r\n          finishSortArrayHelper,\r\n          hideShowValue,\r\n        );\r\n        break;\r\n      case 'selection_sort':\r\n        if (isArraySorted() || isSorting) return;\r\n        disableUIElements();\r\n        selectionSort(\r\n          array,\r\n          arrayBars,\r\n          barValues,\r\n          sortingTimer,\r\n          finishSortArrayHelper,\r\n          hideShowValue,\r\n        );\r\n        break;\r\n      case 'shell_sort':\r\n        if (isArraySorted() || isSorting) return;\r\n        disableUIElements();\r\n        shellSort(\r\n          array,\r\n          arrayBars,\r\n          barValues,\r\n          sortingTimer,\r\n          finishSortArrayHelper,\r\n          hideShowValue,\r\n        );\r\n        break;\r\n      default:\r\n        setShowMessage!!(true);\r\n        timer = window.setTimeout(() => {\r\n          setShowMessage!!(false);\r\n          clearTimeout(timer);\r\n        }, 3000);\r\n    }\r\n  };\r\n\r\n  const setBarColor = (idx: number) => {\r\n    const ab = arrayBars.current[idx];\r\n    const bv = barValues.current[idx];\r\n    if (ab !== undefined && ab !== null) {\r\n      ab.style.backgroundColor = '#2185d0';\r\n      ab.style.height = `${array[idx].value}px`;\r\n      bv.textContent = hideShowValue(array[idx].value) as unknown as string;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    sliderValue.current();\r\n    calculateAndSetDimension.current();\r\n    // effect\r\n    window.addEventListener('resize', debounce(calculateAndSetDimension.current));\r\n\r\n    return () => {\r\n      // cleanup\r\n      window.removeEventListener('resize', debounce(calculateAndSetDimension.current));\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <TopNav>\r\n        {{\r\n          topNav, generateNewArray: generateArrayOnClick, sortArray, select,\r\n        }}\r\n      </TopNav>\r\n      <div className=\"dark-mode\">\r\n        <BootstrapSwitchButton\r\n          checked={isSliderChecked}\r\n          width={110}\r\n          onlabel=\"Dark Mode\"\r\n          onstyle=\"dark\"\r\n          offlabel=\"Light mode\"\r\n          offstyle=\"primary\"\r\n          // eslint-disable-next-line react/style-prop-object\r\n          style=\"border\"\r\n          onChange={(checked: boolean) => { darkModeToggle(checked); }}\r\n        />\r\n      </div>\r\n      <Container\r\n        className=\"container\"\r\n        style={{ height: containerHeight }}\r\n        ref={container}\r\n      >\r\n        <Row>\r\n          <Col />\r\n          <Col\r\n            style={{ height: containerHeight }}\r\n            className=\"sort-div\"\r\n            lg={12}\r\n            md={12}\r\n            sm={12}\r\n            xl={12}\r\n            xs={12}\r\n          >\r\n            <div ref={holderDiv} className=\"holder\">\r\n              {\r\n                array.map((val: Bar, idx) => (\r\n                  <div\r\n                    ref={(element: HTMLDivElement) => { arrayBars.current[val.idx] = element; }}\r\n                    style={{\r\n                      width: currentWidth,\r\n                      height: `${val.value}px`,\r\n                      backgroundColor: getColor(val.state),\r\n                    }}\r\n                    className=\"array-bar\"\r\n                    // key={val.idx}\r\n                    // eslint-disable-next-line react/no-array-index-key\r\n                    key={idx}\r\n                  >\r\n                    {setBarColor(idx)}\r\n                    <span\r\n                      ref={(element: HTMLSpanElement) => { barValues.current[val.idx] = element; }}\r\n                      className=\"span-value text-align\"\r\n                    >\r\n                      {hideShowValue(val.value)}\r\n                    </span>\r\n                  </div>\r\n                ))\r\n              }\r\n              <div ref={buttomSection}>\r\n                <div className=\"finish-button\">\r\n                  <a\r\n                    ref={finishButton}\r\n                    href=\"/finish\"\r\n                    onClick={finishSortArray}\r\n                    className=\"ui secondary submit button inverted\"\r\n                  >\r\n                    Finish\r\n                  </a>\r\n                </div>\r\n                <div ref={arraySizeSpeed}>Change Array Size and Sorting Speed</div>\r\n                <div>\r\n                  <input\r\n                    ref={slider}\r\n                    type=\"range\"\r\n                    min={minWidth}\r\n                    max={maxWidth}\r\n                    defaultValue=\"26\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n          <Col />\r\n        </Row>\r\n      </Container>\r\n      <BottomNav>{{ bottomNav, generateNewArray: generateArrayOnClick }}</BottomNav>\r\n\r\n      <div ref={loadingIndicator}>\r\n        <div className=\"info\">\r\n          <Header textAlign=\"center\" block>\r\n            <Label color=\"grey\" size=\"large\">Loading .....</Label>\r\n          </Header>\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        aria-live=\"polite\"\r\n        aria-atomic=\"true\"\r\n        style={{\r\n          position: 'relative',\r\n          display: showMessage ? 'block' : 'none',\r\n        }}\r\n      >\r\n        <div style={{ position: 'absolute', bottom: 0, right: 0 }}>\r\n          {\r\n            (showMessage)\r\n          }\r\n          <Message\r\n            negative\r\n            compact\r\n            style={{ width: '305px' }}\r\n            onDismiss={() => setShowMessage!!(false)}\r\n          >\r\n            <Message.Header>Sorting Visualizer</Message.Header>\r\n            <p>Please Select a Sorting Algorithm.</p>\r\n          </Message>\r\n        </div>\r\n      </div>\r\n      <div className=\"error-div\">Use Screen of 320px and above</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const sortTimers = {\r\n  stopBubbleSortTimer: false,\r\n  stopInsertionSortTimer: false,\r\n  stopMergeSortTimer: false,\r\n  stopQuickSortTimer: false,\r\n  stopSelectionSortTimer: false,\r\n  stopShellSortTimer: false,\r\n};\r\n\r\nexport const timer = (ms: number) => new Promise((res) => setTimeout(res, ms));\r\nexport const startBubbleSortTimer = () => { sortTimers.stopBubbleSortTimer = false; };\r\nexport const startInsertionSortTimer = () => { sortTimers.stopInsertionSortTimer = false; };\r\nexport const startMergeSortTimer = () => { sortTimers.stopMergeSortTimer = false; };\r\nexport const startQuickSortTimer = () => { sortTimers.stopQuickSortTimer = false; };\r\nexport const startSelectionSortTimer = () => { sortTimers.stopSelectionSortTimer = false; };\r\nexport const startShellSortTimer = () => { sortTimers.stopShellSortTimer = false; };\r\n\r\nexport const stopSortTimers = () => {\r\n  sortTimers.stopBubbleSortTimer = true;\r\n  sortTimers.stopInsertionSortTimer = true;\r\n  sortTimers.stopMergeSortTimer = true;\r\n  sortTimers.stopQuickSortTimer = true;\r\n  sortTimers.stopSelectionSortTimer = true;\r\n  sortTimers.stopShellSortTimer = true;\r\n};\r\n","const barStates = {\r\n  defaultState: 'default',\r\n  selectedState: 'selected',\r\n  sortedState: 'sorted',\r\n};\r\n\r\nexport default barStates;\r\n","export const blue = '#2185d0';\r\nexport const red = '#ff0000';\r\nexport const turquoise = '#40e0d0';\r\n","/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable no-labels */\r\n/* eslint-disable no-await-in-loop */\r\nimport { MutableRefObject } from 'react';\r\nimport { startBubbleSortTimer, timer, sortTimers } from './sortingTimers';\r\nimport { ArrayBars } from '../helperFunctions/ArrayBars';\r\nimport { blue, red, turquoise } from '../helperFunctions/backgroundColors';\r\n\r\nlet arr: ArrayBars = [];\r\n\r\nconst swap = (positionA: number, positionB: number) => {\r\n  const temp = arr[positionA];\r\n  arr[positionA] = arr[positionB];\r\n  arr[positionB] = temp;\r\n};\r\n\r\n/**\r\n *\r\n * change from async function\r\n * use set timeout\r\n *\r\n */\r\nconst bubbleSort = async (\r\n  array: ArrayBars,\r\n  arrayBars: MutableRefObject<HTMLDivElement[]> | null,\r\n  barValues: MutableRefObject<HTMLSpanElement[]> | null,\r\n  sortingTimer: number | null = null,\r\n  // eslint-disable-next-line no-unused-vars\r\n  finishSortArrayHelper: (arry: ArrayBars) => void,\r\n  // eslint-disable-next-line no-unused-vars\r\n  hideShowValue: (value: number) => void,\r\n) => {\r\n  arr = array;\r\n  startBubbleSortTimer();\r\n  bubbleSortParentLoop:\r\n  for (let i = 0; i < arr.length; i += 1) {\r\n    for (let j = 0; j < arr.length - i - 1; j += 1) {\r\n      const valueA = arr[j].value;\r\n      const valueB = arr[j + 1].value;\r\n      const isValueAGreaterThanValueB = valueA > valueB;\r\n      const isSortingTimerNull = sortingTimer === null;\r\n\r\n      if (isValueAGreaterThanValueB && isSortingTimerNull) {\r\n        swap(j, j + 1);\r\n      } else if (!isSortingTimerNull) {\r\n        if (sortTimers.stopBubbleSortTimer) break bubbleSortParentLoop;\r\n        const arrayBarA = arrayBars!!.current[j];\r\n        const arrayBarB = arrayBars!!.current[j + 1];\r\n        const barValueA = barValues!!.current[j];\r\n        const barValueB = barValues!!.current[j + 1];\r\n\r\n        arrayBarA.style.backgroundColor = red;\r\n        arrayBarB.style.backgroundColor = red;\r\n        await timer(sortingTimer!! / 2);\r\n\r\n        if (isValueAGreaterThanValueB && !sortTimers.stopBubbleSortTimer) {\r\n          arrayBarA.style.height = `${arr[j + 1].value}px`;\r\n          arrayBarB.style.height = `${arr[j].value}px`;\r\n          barValueA.textContent = hideShowValue(arr[j + 1].value) as unknown as string;\r\n          barValueB.textContent = hideShowValue(arr[j].value) as unknown as string;\r\n          swap(j, j + 1);\r\n        }\r\n\r\n        arrayBarA.style.backgroundColor = blue;\r\n        // setting the next array bar color to red\r\n        if (j < arr.length - i - 2 && !sortTimers.stopBubbleSortTimer) {\r\n          const arrayBar = arrayBars!!.current[j + 2];\r\n          arrayBar.style.backgroundColor = red;\r\n        }\r\n\r\n        // chaging color of the already solved array bars\r\n        if (j === arr.length - i - 2 && !sortTimers.stopBubbleSortTimer) {\r\n          const arrayBar = arrayBars!!.current[j + 1];\r\n          arrayBar.style.backgroundColor = turquoise;\r\n        }\r\n\r\n        // soritng is done turing the smallest array bar color\r\n        if (i === arr.length - 2 && !sortTimers.stopBubbleSortTimer) {\r\n          const arrayBar = arrayBars!!.current[j];\r\n          arrayBar.style.backgroundColor = turquoise;\r\n        }\r\n        await timer(sortingTimer!! / 2);\r\n      }\r\n    }\r\n    if (i === arr.length - 1) {\r\n      finishSortArrayHelper(arr);\r\n    }\r\n  }\r\n  return arr;\r\n};\r\n\r\nexport default bubbleSort;\r\n","/* eslint-disable no-await-in-loop */\r\n/* eslint-disable no-labels */\r\n/* eslint-disable no-restricted-syntax */\r\nimport { MutableRefObject } from 'react';\r\nimport { ArrayBars } from '../helperFunctions/ArrayBars';\r\nimport { red, turquoise } from '../helperFunctions/backgroundColors';\r\nimport { startInsertionSortTimer, sortTimers, timer } from './sortingTimers';\r\n\r\nlet arr: ArrayBars = [];\r\n\r\nconst insert = (j: number) => {\r\n  arr[j + 1] = arr[j];\r\n};\r\n\r\nconst insertionSort = async (\r\n  array: ArrayBars,\r\n  arrayBars: MutableRefObject<HTMLDivElement[]> | null,\r\n  barValues: MutableRefObject<HTMLSpanElement[]> | null,\r\n  sortingTimer: number | null,\r\n  // eslint-disable-next-line no-unused-vars\r\n  finishSortArrayHelper: (arry: ArrayBars) => void,\r\n  // eslint-disable-next-line no-unused-vars\r\n  hideShowValue: (value: number) => void,\r\n) => {\r\n  arr = array;\r\n  startInsertionSortTimer();\r\n  insertionSortParentLoop:\r\n  for (let i = 1; i < arr.length; i += 1) {\r\n    const current = arr[i];\r\n    const currentVal = current.value;\r\n    let j = i - 1;\r\n    while (j >= 0) {\r\n      if (sortTimers.stopInsertionSortTimer) break insertionSortParentLoop;\r\n      const valJ = arr[j].value;\r\n      const isValJGreaterThanCurrent = valJ > currentVal;\r\n      const isSortingTimerNull = sortingTimer === null;\r\n\r\n      if (!isValJGreaterThanCurrent) break;\r\n      if (isValJGreaterThanCurrent && isSortingTimerNull) {\r\n        insert(j);\r\n      } else if (!isSortingTimerNull) {\r\n        const arrayBari = arrayBars!!.current[i];\r\n        const arrayBarj = arrayBars!!.current[j];\r\n        arrayBari.style.backgroundColor = red;\r\n        await timer(sortingTimer!! / 2);\r\n\r\n        if (!sortTimers.stopInsertionSortTimer) {\r\n          arrayBarj.style.backgroundColor = red;\r\n          await timer(sortingTimer!! / 2);\r\n        }\r\n\r\n        if (isValJGreaterThanCurrent && !sortTimers.stopInsertionSortTimer) {\r\n          arrayBarj.style.backgroundColor = turquoise;\r\n          insert(j);\r\n        }\r\n\r\n        // await timer(500);\r\n        //\r\n      }\r\n      j -= 1;\r\n    }\r\n\r\n    if (sortTimers.stopInsertionSortTimer) break;\r\n    arr[j + 1] = current;\r\n    if (sortingTimer !== null) {\r\n      for (let k = 0; k <= i; k += 1) {\r\n        const ab = arrayBars!!.current[k];\r\n        const bv = barValues!!.current[k];\r\n        ab.style.backgroundColor = turquoise;\r\n        ab.style.height = `${arr[k].value}px`;\r\n        bv.textContent = hideShowValue(arr[k].value) as unknown as string;\r\n      }\r\n    }\r\n\r\n    if (i === arr.length - 1 && sortingTimer !== null) { finishSortArrayHelper(arr); }\r\n  }\r\n  return arr;\r\n};\r\n\r\nexport default insertionSort;\r\n","/* eslint-disable no-await-in-loop */\r\n/* eslint-disable no-labels */\r\n/* eslint-disable no-restricted-syntax */\r\nimport { MutableRefObject } from 'react';\r\nimport { ArrayBars } from '../helperFunctions/ArrayBars';\r\nimport { startSelectionSortTimer, sortTimers, timer } from './sortingTimers';\r\nimport { red, blue, turquoise } from '../helperFunctions/backgroundColors';\r\n\r\nlet arr: ArrayBars = [];\r\n\r\nconst swap = (posA: number, posB: number) => {\r\n  const temp = arr[posA];\r\n  arr[posA] = arr[posB];\r\n  arr[posB] = temp;\r\n};\r\n\r\nconst selectionSort = async (\r\n  array: ArrayBars,\r\n  arrayBars: MutableRefObject<HTMLDivElement[]> | null,\r\n  barValues: MutableRefObject<HTMLSpanElement[]> | null,\r\n  sortingTimer: number | null,\r\n  // eslint-disable-next-line no-unused-vars\r\n  finishSortArrayHelper: (arry: ArrayBars) => void,\r\n  // eslint-disable-next-line no-unused-vars\r\n  hideShowValue: (value: number) => void,\r\n) => {\r\n  arr = array;\r\n  startSelectionSortTimer();\r\n  selectionSortParentLoop:\r\n  for (let i = 0; i < arr.length; i += 1) {\r\n    let minPos = i;\r\n    for (let j = i + 1; j < arr.length; j += 1) {\r\n      if (sortTimers.stopSelectionSortTimer) break selectionSortParentLoop;\r\n      const isValJLessThanMinVal = arr[j].value < arr[minPos].value;\r\n      const isSortingTimerNull = sortingTimer === null;\r\n\r\n      if (isValJLessThanMinVal && isSortingTimerNull) {\r\n        minPos = j;\r\n      } else if (!isSortingTimerNull) {\r\n        const arrayBarA = arrayBars!!.current[minPos];\r\n        const arrayBarB = arrayBars!!.current[j];\r\n        arrayBarA.style.backgroundColor = red;\r\n        arrayBarB.style.backgroundColor = red;\r\n        await timer(sortingTimer!! / 2);\r\n\r\n        if (isValJLessThanMinVal && !sortTimers.stopSelectionSortTimer) {\r\n          arrayBarA.style.backgroundColor = blue;\r\n          arrayBarB.style.backgroundColor = red;\r\n          minPos = j;\r\n          await timer(sortingTimer!! / 2);\r\n        } else if (!sortTimers.stopSelectionSortTimer) {\r\n          arrayBarA.style.backgroundColor = red;\r\n          arrayBarB.style.backgroundColor = blue;\r\n          await timer(sortingTimer!! / 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (minPos !== i && sortingTimer === null) swap(i, minPos);\r\n\r\n    if (minPos !== i && !sortTimers.stopSelectionSortTimer && sortingTimer !== null) {\r\n      const abA = arrayBars!!.current[i];\r\n      const abB = arrayBars!!.current[minPos];\r\n      const bvA = barValues!!.current[i];\r\n      const bvB = barValues!!.current[minPos];\r\n\r\n      abA.style.height = `${arr[minPos].value}px`;\r\n      abB.style.height = `${arr[i].value}px`;\r\n      abA.style.backgroundColor = turquoise;\r\n      abB.style.backgroundColor = blue;\r\n      bvA.textContent = hideShowValue(arr[minPos].value) as unknown as string;\r\n      bvB.textContent = hideShowValue(arr[i].value) as unknown as string;\r\n      swap(i, minPos);\r\n    } else if (!sortTimers.stopSelectionSortTimer && sortingTimer !== null) {\r\n      const abA = arrayBars!!.current[i];\r\n      abA.style.backgroundColor = turquoise;\r\n    }\r\n\r\n    if (i === arr.length - 1 && sortingTimer !== null) { finishSortArrayHelper(arr); }\r\n  }\r\n  return arr;\r\n};\r\n\r\nexport default selectionSort;\r\n","/* eslint-disable no-await-in-loop */\r\n/* eslint-disable no-labels */\r\n/* eslint-disable no-restricted-syntax */\r\nimport { MutableRefObject } from 'react';\r\nimport { ArrayBars } from '../helperFunctions/ArrayBars';\r\nimport { startShellSortTimer, sortTimers, timer } from './sortingTimers';\r\nimport { blue, red, turquoise } from '../helperFunctions/backgroundColors';\r\n\r\nlet arr: ArrayBars = [];\r\n\r\nconst swap = (posA: number, posB: number) => {\r\n  const temp = arr[posA];\r\n  arr[posA] = arr[posB];\r\n  arr[posB] = temp;\r\n};\r\n\r\nconst shellSort = async (\r\n  array: ArrayBars,\r\n  arrayBars: MutableRefObject<HTMLDivElement[]> | null,\r\n  barValues: MutableRefObject<HTMLSpanElement[]> | null,\r\n  sortingTimer: number | null = null,\r\n  // eslint-disable-next-line no-unused-vars\r\n  finishSortArrayHelper: (arry: ArrayBars) => void,\r\n  // eslint-disable-next-line no-unused-vars\r\n  hideShowValue: (value: number) => void,\r\n) => {\r\n  arr = array;\r\n  const n = arr.length;\r\n  startShellSortTimer();\r\n\r\n  shellSortParentLoop:\r\n  for (let gap = Math.floor(n / 2); gap >= 1; gap = Math.floor(gap / 2)) {\r\n    for (let j = gap; j < n; j += 1) {\r\n      for (let i = j - gap; i >= 0; i -= gap) {\r\n        if (sortTimers.stopShellSortTimer) break shellSortParentLoop;\r\n        const isSortingTimerNull = sortingTimer === null;\r\n        const arrayBarA = arrayBars?.current[i];\r\n        const arrayBarB = arrayBars?.current[i + gap];\r\n\r\n        if (!isSortingTimerNull) {\r\n          arrayBarA!!.style.backgroundColor = red;\r\n          arrayBarB!!.style.backgroundColor = red;\r\n          await timer(sortingTimer!! / 2);\r\n        }\r\n\r\n        if (sortTimers.stopShellSortTimer) break shellSortParentLoop;\r\n\r\n        if (arr[i].value < arr[i + gap].value) {\r\n          if (gap === 1 && !isSortingTimerNull) {\r\n            arrayBarA!!.style.backgroundColor = turquoise;\r\n            arrayBarB!!.style.backgroundColor = turquoise;\r\n          } else if (!isSortingTimerNull) {\r\n            arrayBarA!!.style.backgroundColor = blue;\r\n            arrayBarB!!.style.backgroundColor = blue;\r\n          }\r\n          break;\r\n        } else if (arr[i].value > arr[i + gap].value && isSortingTimerNull) {\r\n          swap(i, i + gap);\r\n        } else if (arr[i].value > arr[i + gap].value && !isSortingTimerNull) {\r\n          await timer(sortingTimer!! / 2);\r\n          if (sortTimers.stopShellSortTimer) break shellSortParentLoop;\r\n          const barValueA = barValues!!.current[i];\r\n          const barValueB = barValues!!.current[i + gap];\r\n\r\n          arrayBarA!!.style.height = `${arr[i + gap].value}px`;\r\n          arrayBarB!!.style.height = `${arr[i].value}px`;\r\n          if (gap === 1) {\r\n            arrayBarA!!.style.backgroundColor = turquoise;\r\n            arrayBarB!!.style.backgroundColor = turquoise;\r\n          } else {\r\n            arrayBarA!!.style.backgroundColor = blue;\r\n            arrayBarB!!.style.backgroundColor = blue;\r\n          }\r\n          barValueA.textContent = hideShowValue(arr[i + gap].value) as unknown as string;\r\n          barValueB.textContent = hideShowValue(arr[i].value) as unknown as string;\r\n          swap(i, i + gap);\r\n        } else if (!isSortingTimerNull) {\r\n          if (gap === 1) {\r\n            arrayBarA!!.style.backgroundColor = turquoise;\r\n            arrayBarB!!.style.backgroundColor = turquoise;\r\n          } else {\r\n            arrayBarA!!.style.backgroundColor = blue;\r\n            arrayBarB!!.style.backgroundColor = blue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (gap === 1 && sortingTimer !== null) finishSortArrayHelper(arr);\r\n  }\r\n\r\n  return arr;\r\n};\r\n\r\nexport default shellSort;\r\n","/* eslint-disable no-await-in-loop */\r\nimport { MutableRefObject } from 'react';\r\nimport { ArrayBars } from '../helperFunctions/ArrayBars';\r\nimport { blue, red, turquoise } from '../helperFunctions/backgroundColors';\r\nimport { SortAnimations } from '../helperFunctions/SortAnimations';\r\nimport { startMergeSortTimer, timer, sortTimers } from './sortingTimers';\r\n\r\nlet arr: ArrayBars = [];\r\nlet originalArr: ArrayBars = [];\r\n\r\nconst merge = (\r\n  a: ArrayBars,\r\n  lowerBound: number,\r\n  mid: number,\r\n  upperBound: number,\r\n  animations: SortAnimations[],\r\n) => {\r\n  const finalArr: ArrayBars = [];\r\n  let i = lowerBound;\r\n  let j = mid + 1;\r\n  let k = lowerBound;\r\n\r\n  while (i <= mid && j <= upperBound) {\r\n    const anims: SortAnimations = { comparison: [], swap: [], put: [] };\r\n    anims.comparison = [i, j];\r\n    if (a[i].value <= a[j].value) {\r\n      anims.swap = [i, j];\r\n      anims.put = [i, k];\r\n      finalArr[k] = a[i];\r\n      i += 1;\r\n    } else {\r\n      anims.swap = [j, i];\r\n      anims.put = [j, k];\r\n      finalArr[k] = a[j];\r\n      j += 1;\r\n    }\r\n\r\n    k += 1;\r\n    animations.push(anims);\r\n  }\r\n\r\n  if (i > mid) {\r\n    while (j <= upperBound) {\r\n      animations.push({\r\n        comparison: [j, j],\r\n        swap: [j, upperBound],\r\n        put: [j, k],\r\n      });\r\n      finalArr[k] = a[j];\r\n      j += 1;\r\n      k += 1;\r\n    }\r\n  } else {\r\n    while (i <= mid) {\r\n      animations.push({\r\n        comparison: [i, i],\r\n        swap: [i, mid],\r\n        put: [i, k],\r\n      });\r\n      finalArr[k] = a[i];\r\n      i += 1;\r\n      k += 1;\r\n    }\r\n  }\r\n\r\n  for (k = lowerBound; k <= upperBound; k += 1) {\r\n    arr[k] = finalArr[k];\r\n  }\r\n};\r\n\r\nconst mergeSortHelper = (\r\n  arry: ArrayBars,\r\n  lowerBound: number,\r\n  upperBound: number,\r\n  animations: SortAnimations[],\r\n) => {\r\n  if (lowerBound < upperBound) {\r\n    const mid = Math.floor((lowerBound + upperBound) / 2);\r\n    mergeSortHelper(arry, lowerBound, mid, animations);\r\n    mergeSortHelper(arry, mid + 1, upperBound, animations);\r\n    merge(arry, lowerBound, mid, upperBound, animations);\r\n  }\r\n};\r\n\r\nconst animateMergeHelper = (auxiliaryArr: ArrayBars, swap: number[], put: number[]) => {\r\n  const swapidx0 = swap[0];\r\n  const swapidx1 = swap[1];\r\n  const oArrPos = put[0];\r\n  const auxArrPos = put[1];\r\n\r\n  // eslint-disable-next-line no-param-reassign\r\n  auxiliaryArr[auxArrPos] = originalArr[oArrPos];\r\n\r\n  if (swapidx0 === swapidx1) {\r\n    for (let i = 0; i < auxiliaryArr.length; i += 1) {\r\n      originalArr[i] = auxiliaryArr[i];\r\n    }\r\n  }\r\n};\r\n\r\nexport const animate = async (\r\n  animations: ArrayBars | SortAnimations[],\r\n  arrayBars: MutableRefObject<HTMLDivElement[]>,\r\n  barValues: MutableRefObject<HTMLSpanElement[]>,\r\n  sortingTimer: number,\r\n  // eslint-disable-next-line no-unused-vars\r\n  finishSortArrayHelper: (arry: ArrayBars) => void,\r\n  // eslint-disable-next-line no-unused-vars\r\n  hideShowValue: (value: number) => void,\r\n) => {\r\n  startMergeSortTimer();\r\n  const anims = animations as SortAnimations[];\r\n  const auxiliaryArr: ArrayBars = [];\r\n  const isArrDivisibleBy2 = originalArr.length % 2 === 0;\r\n  const middle = isArrDivisibleBy2 ? originalArr.length / 2 : (originalArr.length + 1) / 2;\r\n  let isFinalMerge = false;\r\n  for (let i = 0; i < anims.length; i += 1) {\r\n    if (sortTimers.stopMergeSortTimer) break;\r\n    const { comparison, swap, put } = anims[i];\r\n    const arrayBarA = arrayBars.current[comparison[0]];\r\n    const arrayBarB = arrayBars.current[comparison[1]];\r\n    arrayBarA.style.backgroundColor = red;\r\n    arrayBarB.style.backgroundColor = red;\r\n\r\n    await timer(sortingTimer);\r\n    if (sortTimers.stopMergeSortTimer) break;\r\n    animateMergeHelper(auxiliaryArr, swap, put);\r\n\r\n    const changedVal = auxiliaryArr[put[1]].value;\r\n    const changeBar = arrayBars.current[put[1]];\r\n    const barValue = barValues.current[put[1]];\r\n\r\n    changeBar.style.backgroundColor = red;\r\n    changeBar.style.height = `${changedVal}px`;\r\n    barValue.textContent = hideShowValue(changedVal) as unknown as string;\r\n\r\n    if (comparison[1] - comparison[0] === middle) isFinalMerge = true;\r\n\r\n    if (isFinalMerge) {\r\n      arrayBarA.style.backgroundColor = turquoise;\r\n      arrayBarB.style.backgroundColor = blue;\r\n      changeBar.style.backgroundColor = turquoise;\r\n    } else {\r\n      arrayBarA.style.backgroundColor = blue;\r\n      arrayBarB.style.backgroundColor = blue;\r\n      changeBar.style.backgroundColor = blue;\r\n    }\r\n\r\n    if (i === anims.length - 1) {\r\n      finishSortArrayHelper(arr);\r\n    }\r\n  }\r\n  return arr;\r\n};\r\n\r\nconst mergeSort = (\r\n  array: ArrayBars,\r\n  sortingTimer: number | null = null,\r\n) => {\r\n  const animations: SortAnimations[] = [];\r\n  arr = array;\r\n  originalArr = [...array];\r\n  mergeSortHelper(arr, 0, arr.length - 1, animations);\r\n\r\n  if (sortingTimer === null) {\r\n    return arr;\r\n  }\r\n\r\n  return animations;\r\n};\r\n\r\nexport default mergeSort;\r\n","/* eslint-disable no-await-in-loop */\r\nimport { MutableRefObject } from 'react';\r\nimport { ArrayBars } from '../helperFunctions/ArrayBars';\r\nimport { red, blue, turquoise } from '../helperFunctions/backgroundColors';\r\nimport { SortAnimations } from '../helperFunctions/SortAnimations';\r\nimport { startQuickSortTimer, timer, sortTimers } from './sortingTimers';\r\n\r\nlet arr: ArrayBars = [];\r\nlet originalArr: ArrayBars = [];\r\n\r\nconst swapValues = (arry: ArrayBars, posA: number, posB: number) => {\r\n  const temp = arry[posA];\r\n  // eslint-disable-next-line no-param-reassign\r\n  arry[posA] = arry[posB];\r\n  // eslint-disable-next-line no-param-reassign\r\n  arry[posB] = temp;\r\n};\r\n\r\nconst comparisonAnims = (\r\n  animations: SortAnimations[],\r\n  lowerBound: number,\r\n  startOrEnd: number,\r\n  swap: number = -1,\r\n) => {\r\n  animations.push({\r\n    comparison: [lowerBound, startOrEnd, swap], swap: [], put: [],\r\n  });\r\n};\r\n\r\nconst swapAnims = (\r\n  animations: SortAnimations[],\r\n  startOrLowerBound: number,\r\n  end: number,\r\n  lowerBound: number = -1,\r\n  finalSwap: number = -1,\r\n) => {\r\n  animations.push({\r\n    comparison: [startOrLowerBound, end, lowerBound],\r\n    swap: [startOrLowerBound, end, finalSwap],\r\n    put: [],\r\n  });\r\n};\r\n\r\nconst partitiion = (\r\n  arry: ArrayBars,\r\n  lowerBound: number,\r\n  upperBound: number,\r\n  animations: SortAnimations[],\r\n) => {\r\n  const pivot = arry[lowerBound].value;\r\n  let start = lowerBound;\r\n  let end = upperBound;\r\n  while (start < end) {\r\n    while (start < arry.length - 1 && arry[start].value <= pivot) {\r\n      comparisonAnims(animations, lowerBound, start, end);\r\n      start += 1;\r\n    }\r\n    comparisonAnims(animations, lowerBound, start, start);\r\n\r\n    while (arry[end].value > pivot) {\r\n      comparisonAnims(animations, lowerBound, end);\r\n      end -= 1;\r\n    }\r\n    comparisonAnims(animations, lowerBound, end);\r\n\r\n    if (start < end) {\r\n      swapAnims(animations, start, end, lowerBound);\r\n      swapValues(arr, start, end);\r\n    }\r\n  }\r\n\r\n  swapAnims(animations, lowerBound, end, -1, -8);\r\n  swapValues(arr, lowerBound, end);\r\n  return end;\r\n};\r\n\r\nconst quickSortHelper = (\r\n  arry: ArrayBars,\r\n  lowerBound: number,\r\n  upperBound: number,\r\n  animations: SortAnimations[],\r\n) => {\r\n  if (lowerBound < upperBound) {\r\n    const end = partitiion(arry, lowerBound, upperBound, animations);\r\n    quickSortHelper(arry, lowerBound, end - 1, animations);\r\n    quickSortHelper(arry, end + 1, upperBound, animations);\r\n  }\r\n};\r\n\r\nconst quickSort = (\r\n  array: ArrayBars,\r\n  sortingTimer: number | null = null,\r\n) => {\r\n  const animations: SortAnimations[] = [];\r\n  arr = array;\r\n  originalArr = [...array];\r\n  quickSortHelper(arr, 0, arr.length - 1, animations);\r\n\r\n  if (sortingTimer === null) {\r\n    return arr;\r\n  }\r\n\r\n  return animations;\r\n};\r\n\r\nconst animateQuickSort = async (\r\n  animations: ArrayBars | SortAnimations[],\r\n  arrayBars: MutableRefObject<HTMLDivElement[]>,\r\n  barValues: MutableRefObject<HTMLSpanElement[]>,\r\n  sortingTimer: number,\r\n  // eslint-disable-next-line no-unused-vars\r\n  finishSortArrayHelper: (arry: ArrayBars) => void,\r\n  // eslint-disable-next-line no-unused-vars\r\n  hideShowValue: (value: number) => void,\r\n) => {\r\n  startQuickSortTimer();\r\n  const anims = animations as SortAnimations[];\r\n  let arrayBarCPosH = 0;\r\n  for (let i = 0; i < anims.length; i += 1) {\r\n    if (sortTimers.stopQuickSortTimer) break;\r\n    const { comparison, swap } = anims[i];\r\n    const arrayBarA = arrayBars.current[comparison[0]];\r\n    const arrayBarB = arrayBars.current[comparison[1]];\r\n    arrayBarA.style.backgroundColor = red;\r\n    arrayBarB.style.backgroundColor = red;\r\n\r\n    const arrayBarCPos: number | null = comparison[2] === -1 ? null : comparison[2];\r\n    if (arrayBarCPos !== null) {\r\n      arrayBarCPosH = arrayBarCPos;\r\n      const arrayBarC = arrayBars.current[arrayBarCPos];\r\n      arrayBarC.style.backgroundColor = red;\r\n    }\r\n\r\n    if (arrayBarCPosH !== 0) {\r\n      const arrayBarC = arrayBars.current[arrayBarCPosH];\r\n      arrayBarC.style.backgroundColor = red;\r\n    }\r\n\r\n    await timer(sortingTimer);\r\n    if (sortTimers.stopQuickSortTimer) break;\r\n    if (swap.length !== 0) {\r\n      swapValues(originalArr, swap[0], swap[1]);\r\n      const arrayBarAa = arrayBars.current[comparison[0]];\r\n      const arrayBarBb = arrayBars.current[comparison[1]];\r\n      const barValueAa = barValues.current[comparison[0]];\r\n      const barValueBb = barValues.current[comparison[1]];\r\n\r\n      arrayBarAa.style.height = `${originalArr[swap[0]].value}px`;\r\n      arrayBarBb.style.height = `${originalArr[swap[1]].value}px`;\r\n      barValueAa.textContent = hideShowValue(originalArr[swap[0]].value) as unknown as string;\r\n      barValueBb.textContent = hideShowValue(originalArr[swap[1]].value) as unknown as string;\r\n\r\n      const arrayBarC = arrayBars.current[arrayBarCPosH];\r\n      arrayBarC.style.backgroundColor = blue;\r\n    }\r\n\r\n    arrayBarA.style.backgroundColor = blue;\r\n    arrayBarB.style.backgroundColor = blue;\r\n\r\n    if (i === anims.length - 1) {\r\n      finishSortArrayHelper(arr);\r\n      return arr;\r\n    }\r\n\r\n    if (swap[2] === -8) {\r\n      const arrayBar = arrayBars.current[swap[1]];\r\n      arrayBar.style.backgroundColor = turquoise;\r\n    }\r\n    /**\r\n     * passing -8 when the pivot element is swapped to its position\r\n     * and -1 as lower bound and adding them together results to -9\r\n     * when this happens check the next anims i.e `anims[i + 1].comparison[0]`\r\n     * the value there is the number of items solved on the left side\r\n     */\r\n    const swapPos = swap.length !== 0 ? swap[2] : 0;\r\n    const comparisonPos = comparison[2];\r\n    const sum = swapPos + comparisonPos;\r\n    if (9 + sum === 0) {\r\n      const animsH = i + 1 <= anims.length ? i + 1 : -1;\r\n      if (animsH === -1) return arr;\r\n      const comparisonH = anims[animsH].comparison;\r\n      for (let j = 0; j < comparisonH[0]; j += 1) {\r\n        const arrayBar = arrayBars.current[j];\r\n        arrayBar.style.backgroundColor = turquoise;\r\n      }\r\n    }\r\n  }\r\n  return arr;\r\n};\r\n\r\nexport { quickSort, animateQuickSort };\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}